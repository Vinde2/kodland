# -*- coding: utf-8 -*-
"""sos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OdYQNV0zD4C6PSur3DLPS48zkJ826O0d
"""

!unzip ./sos.zip

!pip install Pillow==9.1.0

from PIL import Image
Image.__version__

from google.colab import files

path = files.upload()
path = list(path.keys())[0]
image=Image.open(path)

from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image, ImageOps  # Install pillow instead of PIL
import numpy as np

# Disable scientific notation for clarity
np.set_printoptions(suppress=True)

# ładuowanie modelu i labels
model = load_model("keras_model.h5", compile=False)
class_names = open("labels.txt", "r").readlines()

#NWM coś w stylu tworzenie pięciowymiarowego czegoś by nakarmić model Xd
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

# wywoływanie i przetwarzanie obrazu
image = image.convert("RGB")
size = (224, 224)
image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
image_array = np.asarray(image)
normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
data[0] = normalized_image_array

# przewidywanie
prediction = model.predict(data)
index = np.argmax(prediction)
class_name = class_names[index]
confidence_score = prediction[0][index]

# tworzenie koncowego wyniku
print("Class:", class_name[2:], end="")
print("Confidence Score:", confidence_score)

def SOS_looking(image, model , lables):
  # Disable scientific notation for clarity
  np.set_printoptions(suppress=True)

  # ładuowanie modelu i labels
  model = load_model("keras_model.h5", compile=False)
  class_names = open("labels.txt", "r").readlines()

  #NWM coś w stylu tworzenie pięciowymiarowego czegoś by nakarmić model Xd
  # Create the array of the right shape to feed into the keras model
  # The 'length' or number of images you can put into the array is
  # determined by the first position in the shape tuple, in this case 1
  data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

  # wywoływanie i przetwarzanie obrazu
  size = (224, 224)
  image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
  image = image.convert("RGB")

  image_array = np.asarray(image)
  normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
  data[0] = normalized_image_array

  # przewidywanie
  prediction = model.predict(data)
  index = np.argmax(prediction)
  class_name = class_names[index]
  confidence_score = prediction[0][index]

  # tworzenie koncowego wyniku
  print("Class:", class_name[2:], end="")
  print("Confidence Score:", confidence_score)
  SOS = class_name[0].strip()

  if SOS == '0' :
    print("Na zdięciach przeanalizowanych przez ai znajduje się ktoś potrzebujący pomocy")
  elif SOS == '1' :
    print('Na zdięciach przeanalizowanych przez ai nikt nie potrzebuje pomocy')

print(SOS_looking( image, "keras_model.h5",  "labels.txt"))